/*
  rlwrap maxima
  $ load ("analysis.mac")$
*/
load (draw)$
load (stats)$
load (descriptive)$

numer: true$

compose (f, g) :=
  buildq (
    [f, g],
    lambda ([x], f (g (x))))$

divn (x, n) :=
  n * floor (x / n)$

slice (min, max, xs) := rest(firstn(xs, max - 1), min - 1)$

/*
  Accepts a list of the form [xs, ys], where xs and ys are two lists
  containing n elements; and returns [[xs0, ys0], [xs1, ys1], ...].
*/
zip (xss) :=
  makelist ([xss [1][i], xss [2][i]], i, length (xss [1]))$

/*
  Accepts three arguments: getKey and getValue, functions; and xs, a
  list; and returns an array `a` where for every value `x` in `xs`
  `getValue (x)` is stored under the key `getKey (x)`.

  Note: if two or more values evaluate to the same key, only the latter
  value is retained.
*/
toArray (getKey, getValue, xs) :=
  block ([samples, use_fast_arrays_orig],
    use_fast_arrays_orig: use_fast_arrays,
    use_fast_arrays: true,
    map (
      lambda ([x],
        block ([key, value],
          key: getKey (x),
          value: getValue (x),
          samples [key]: value,
          true)),
      xs),
    use_fast_arrays: use_fast_arrays_orig,
    samples)$
  
/*
  Represents a data field accessor.
*/
defstruct (field (index, transform))$

/*
  Accepts a field offset and returns a new field accessor that will
  select the field and return its value unchanged.
*/
at (offset) :=
  new (field (offset, identity))$

/*
  Accepts one argument: offset, a natural number that represents a
  column offset; and returns a function that accepts a field accessor
  and shifts the accessors' index by the given offset.

  Note: this function is used to create field accessors for joined
  tables.

  Example: `getFieldValues (TU, shift (tha_width)(us_hash));`
*/
shift (offset) :=
  buildq (
    [o : offset],
    lambda ([f],
      new (field (f @ index + o, f @ transform))))$

/*
  Accepts two arguments: row, a matrix row; and field, a field
  accessor; and returns the transformed value from row selected by
  field.
*/
getFieldValue (field) :=
  buildq (
    [i: field @ index, f: field @ transform],
    lambda ([row],
      block ([x],
        x: if stringp (row [i])
          then parse_string (row [i])
          else row [i],
        f (x))))$

divN (n, f) :=
  block (
    [g],
    g : f @ transform,
    f @ transform: buildq ([n, g], lambda ([x], divn (g (x), n))),
    f)$

/*
  Accepts a list of field accessors and returns a row transformer that
  returns the values of the given fields as a list.
*/
selectFields (fields) :=
  buildq (
    [fields],
    lambda ([row],
      map (
        lambda ([field], getFieldValue (field)(row)),
        fields)))$

/* An alias for `selectFields`. */
select: selectFields$

/*
  Accepts two matrices, U and T, where the first row in U and T store
  unique record identifiers, and returns a new list of every pair of
  rows in U and T that have the same ID.

  Note: equivalent to an Inner Join of U and T on their first field.

  Note: this function is slow (5 secs/100 THC rows). Use
  `timer (joinTables)$` to collect information about the function, and
  `timer_info ();` to view the time spent executing the function. Use
  `untimer (joinTables)$` to stop tracking timing information.

  Example: write_data (joinTables (), "join.csv");
*/
joinTables (T, U) :=
  rreduce (append,
    map (
      lambda ([t], 
        h : t [1],
        map (
          lambda ([u], append (t, u)),
            sublist (args (U),
            lambda ([u], is (u [1] = h))
            ))),
      args (T)))$

/*
  Accepts two arguments: M, a matrix where each row represents a
  client; and field, a field accessor; and returns a list of the 
  transformed field values from M.
*/
getFieldValues (M, field) :=
  maplist (getFieldValue (field), M)$

getMinFieldValue (M, field) :=
  smin (getFieldValues (M, field))$

getMaxFieldValue (M, field) :=
  smax (getFieldValues (M, field))$

/*
  Accepts two arguments: M; and field, a field accessor; and
  returns the mean value of the transformed field.
*/
getMeanFieldValue (M, field) :=
  mean (getFieldValues (M, field))$

/*
  Accepts two arguments: M; and field, a field accessor; and returns
  the sample variance of the selected field's values.
*/
getVarFieldValue (M, field) :=
  var1 (getFieldValues (M, field))$

/*
  Accepts two arguments: M; and field, a field accessor; and returns
  the sample standard deviation of the selected field's values.
*/
getStdFieldValue (M, field) :=
  std1 (getFieldValues (M, field))$

/*
  Accepts two arguments: M; and field, a field accessor; and returns
  the sum of the values of the selected field.
*/
getSumFieldValues (M, field) :=
  lsum (x, x, getFieldValues (M, field))$

/*
  Accepts two arguments: M; and field, a field accessor; and returns
  the number of times each field value occurs in M as a list of the
  form [xs, ns], where xs lists the observed field values and ns lists
  the number of times the value was observed.
*/
countFieldValues (M, field) :=
    discrete_freq (getFieldValues (M, field))$

/*
  Accepts two arguments: M; and field, a field accessor; and returns
  the number of times each field occurs in M as a list of the form
  [[x0, n0], [x1, n1], ...] where ni lists the number of times the
  value xi was observed.
*/
countFieldValuesPairs (M, field) :=
  zip (countFieldValues (M, field))$

/*
  Finds the quantile values for the selected field values.

  Example: `getFieldValuesQuantiles (T, tha_numMonthsPast, 1/5);` returns
  the quintile values for the number of months clients were past due on
  rent.
*/
getFieldValuesQuantiles (M, field, threshold) :=
  quantile (getFieldValues (M, field), threshold)$

/*
  Accepts three arguments: M; field, a field accessor; and condition, a
  predicate function that accepts a transformed field value and returns
  true iff the row that contains the value should be included in the
  subsample; and returns the set of rows that satisfies the given field
  value condition.
*/
getSubsample (M, field, condition) :=
  subsample (M, lambda ([row], condition (getFieldValue (field)(row))))$

/* common conditions */
gtZero (x) := is (0 < x)$
eqZero (x) := is (0 = x)$
notNull (x) := is (x # 'null)$

leN (n) :=
  buildq ([n], lambda ([x], is (x <= n)))$

geN (n) :=
  buildq ([n], lambda ([x], is (n <= x)))$

notEq (x) :=
  buildq ([x], lambda ([y], is (x # y)))$

getSubsampleConds (M, conditions) :=
  block ([f],
    f: buildq (
         [conditions],
         lambda ([row],
          rreduce (
            lambda ([condition, acc], acc and ((condition [2]) (getFieldValue (condition [1])(row)))),
            conditions,
            true
        ))),
    subsample (M, f))$

getSubsampleNotNull (M, fields) :=
  getSubsampleConds (M, map (lambda ([f], [f, notNull]), fields))$

/*
  Accepts two arguments: M, a list of lists that are all the same size;
  and f, a function that accepts sublists from M and returns a value;
  and returns an array of the form [[k0, k1, ...], [p0, p1, ...]], where
  pi is a list of rows from M for which f returned the same value, ki.

  This function partitions M into submatrices where every row in each
  submatrix evaluated to the same value when passed to f.

  Example: `partitionSample (M, divN (10, getFieldValue (f)))`

  See: `arrayinfo` to list the array keys and `listarray` to list the
  array values.

  See: "https://stackoverflow.com/questions/
  50886805/does-the-maxima-language-have-a-map-dictionary-data-structure
  -and-if-it-does-ho"
*/
partitionSample (M, f) :=
  block ([samples, use_fast_arrays_orig],
    use_fast_arrays_orig: use_fast_arrays,
    use_fast_arrays: true,
    map (
      lambda ([row],
        block ([x],
          x: f (row),
          if matrixp (samples [x])
          then
            block ([N],
              N: addrow (samples [x], row),
              samples [x]: N,
              true)
          else
            block (
              samples [x]: matrix (row),
              true))),
      M),
    use_fast_arrays: use_fast_arrays_orig,
    samples)$

/*
  Accepts three arguments: M, a list of lists (rows) that all have the
  same size; f, a function that accepts a row from M and returns a
  value (key); and g, a function that accepts two arguments: k, a key
  value; and row, a row from M; and returns a list of the form
  `[g (k0, [r00, r01, ...]), g (k1, [r10, r11, ...), ...]` where all
  rij are rows from M and f (rij) = ki for all of the rows. 

  This function partitions M into submatrices whose rows all have the
  same value when passed to f and then maps over these submatrices
  with g.
*/
mapPartition (M, f, g) :=
  block (
    [Xs, ks],
    Xs: partitionSample (M, f),
    ks: rest (arrayinfo (Xs), 2),
    map (lambda ([k], g (k, Xs [k])), ks));

/*
  Accepts two arguments: M; and fields, a field accessor; and returns a
  hashed array of the form [k0 = T0, k1 = T1, .. kn = Tn], where each
  Ti represents the subset of M for which the field selected by field
  has the value ki.

  Note: this function binds a globally visible variable named samples.
  You must kill this variable between uses.

*/
partitionSampleByField (M, field) :=
  partitionSample (M, getFieldValue (field))$

/*
  Accepts three arguments: M, a list of lists (rows) that all have the
  same size; field, a field accessor; and f, a function that accepts
  two arguments: k, a field value; and rows, a list of rows from M that
  all have the same field value, k; and returns
  `[f (k0, [r00, r01, ...]), f (k1, [r10, r11, ...]), ...]` where all
  rij are rows from M, and getFieldValue (field)(rij) = ki.

  This function partitions M into submatrices based on the value of the
  given field and then folds over the submatrices using f.
*/
mapPartitionByField (M, field, f) :=
  mapPartition (M, getFieldValue (field), f)$


/*
  Accepts three arguments: width, a natural number; M; and field, a field
  accessor; divides the range of field values into intervals of size width;
  and counts returns the number of values that fall into each interval.

  Specifically, this function returns a list of the form [xs, ns] where
  xs lists the intervals and ns lists the number of values that fell
  within each of the intervals.

  Example: `countFieldValuesInIntervals (100, U, us_monthlyIncome)`
  divides the range of observed monthly incomes into $100 intervals and
  returns the number of clients who reported incomes falling within
  each of these intervals.
*/
countFieldValuesInIntervals (width, M, field) :=
  block (
    [xs, lower, upper, numIntervals],
    xs: getFieldValues (M, field),
    lower: smin (xs),
    upper: smax (xs),
    numIntervals: ceiling ((upper - lower) / width),
    continuous_freq (xs, [lower, width * numIntervals + lower, numIntervals]));

fieldValuesInIntervalsPoints (width, M, field) :=
  block ([xs],
    xs: countFieldValuesInIntervals (width, M, field),
    zip ([rest (xs [1], -1), xs [2]]))$

plotPoints (ps, plotTitle, labelx, labely) :=
  draw2d (
    point_size = 1,
    point_type = filled_circle,
    points_joined = true,
    points (ps),
    grid = true,
    title = plotTitle,
    xlabel = labelx,
    ylabel = labely,
    yrange = [smin (makelist (p [2], p, ps)), smax (makelist (p [2], p, ps))],
    file_name = "tmp_plot",
    terminal = 'svg)$

plotPointsLog (ps, plotTitle, labelx, labely) :=
  draw2d (
    point_size = 1,
    point_type = filled_circle,
    points_joined = true,
    points (ps),
    grid = true,
    title = plotTitle,
    xlabel = labelx,
    ylabel = labely,
    yrange = [smin (makelist (p [2], p, ps)), smax (makelist (p [2], p, ps))],
    logy = true,
    file_name = "tmp_plot",
    terminal = 'svg)$

/*
  Accepts three fields: width, a positive real number; M; and field, a
  field accessor; divides the range of values observed for the selected
  field into intervals of size width; and plots the number of values
  that fall within each interval.
*/
plotFieldValuesInIntervals (width, M, field, plotTitle, labelx, labely) :=
  plotPoints (fieldValuesInIntervalsPoints (width, M, field), plotTitle, labelx, labely)$

plotFieldValuesInIntervalsLog (width, M, field, plotTitle, labelx, labely) :=
  plotPointsLog (fieldValuesInIntervalsPoints (width, M, field), plotTitle, labelx, labely)$

/*
  Accepts three arguments: threshold, a positive real number in [0, 1];
  M; and field, a field accessor; and returns true iff the probability
  that the sampled field values were drawn from a normal distribution
  is greater than `1 - threshold` according to the Shapiro-Wilk test.

  Note: if the number of field values is greater than 5000, this
  function only examines the first 5000 values.

  Note: this method does not appear to be very reliable. For example
  note the variance in: `makelist (take_inference ('p_value,
  test_normality (makelist (random_normal (0, 1), n, 5000))), m, 10);`
*/
fieldValuesAreNormal (threshold, M, field) :=
  is (threshold <=
    take_inference ('p_value,
      test_normality (
        firstn (getFieldValues (M, field), 5000))))$

/*
  Accepts two arguments, xs0 and xs1, two lists of sample values that
  are the same size; and returns the sample correlation between xs0
  and xs1.
*/
getCorr (xs0, xs1) :=
  block (
    [n, u0, u1],
    n : length (xs0),
    u0 : mean (xs0),
    u1 : mean (xs1),
    sum ((xs0 [k] - u0) * (xs1 [k] - u1), k, 1, n) /
    ((n - 1) * std1 (xs0) * std1 (xs1))
  )$

/*
  Accepts three values: M; and two field accessors, field0 and field1;
  and returns the correlation between the selected field values.
*/
getFieldsCorr (M, field0, field1) :=
  getCorr (
    getFieldValues (M, field0),
    getFieldValues (M, field1))$

/*
  Accepts two arguments: M; and fields, a list of field accessors; and
  returns a correlation matrix that records the correlation between the
  selected fields.

  See: list_correlations, which returns the Partial Correlation Matrix
  (a correlation matrix in which indirect correlations between
  variables is suppressed - https://en.wikipedia.org/wiki/Covariance_matrix)
*/
getFieldsCorrMatrix (M, fields) :=
  block (
    [n],
    n: length (fields),
    genmatrix (
      lambda ([i, j], getFieldsCorr (M, fields [i], fields [j])),
      n, n
    ));

/*
  Confidence level for a Pearson correlation measure - r.

  Accepts three arguments: p, a real number that represents the
  correlation under the null hypothesis; r, a real number that
  represents the measured correlation; and n, a natural number that
  represents the sample size; and returns the probability that you
  would observe a correlation between <= r over a random sample of
  size n when the actual correlation is p assuming that the
  correlated random variables are normally distributed.

  Note: generally p = 0, and we consider the observed correlation
  significant if the result is greater than .99 or .95.

  See: Hoel (1951), p. 166
*/
corrTestSig (p, r, n) := 
  block (
    [z, u, o],
    z : 1/2 * log ((1 + r)/(1 - r)),
    u : 1/2 * log ((1 + p)/(1 - p)),
    s : 1/(sqrt (n - 3)),
    erf ((z - u)/(s * sqrt (2)))
  )$

/*
  Accepts three arguments: M; and two field accessors, field0 and
  field1; and returns the probability that the observed linear
  regression coefficient between the values of field0 and field1 were
  produced at random assuming that the values are really uncorrelated
  using the student_t distribution.

  Note: for the regression coeff to be statistically significant, the
  returned p_value should be 0.05 or less.

  See: Hoel (1951), p. 279
*/
regTestSig (M, field0, field1) :=
  take_inference ('p_value,
    simple_linear_regression (
      addcol (
        matrix (),
        getFieldValues (M, field0),
        getFieldValues (M, field1))))$

/*
  Accepts three arguments: threshold, a positive real number [0, 1]; M;
  and fields, a list of field accessors; and returns a correlation
  matrix for the selected fields where any correlation whose p-value is
  less than or equal to threshold is replaced with the string "NS" -
  Not Significant.

  Note: threshold should be >= .95 or .99.
*/
getFieldsFilteredCorrMatrix (threshold, M, fields) :=
  block (
    [n],
    n : length (fields),
    genmatrix (
      lambda ([i, j],
        block ([r, p],
          r: float (abs (getFieldsCorr (M, fields [i], fields [j]))),
          p: float (corrTestSig (0, r, length (M))),
          if (fields [i] = fields [j]) or (threshold <= p)
          then r
          else "NS")),
      n, n))$

/*
  Accepts one argument: ps, a two dimensional array whose first column
  represents the values of an independent variable and whose second
  column represents the associated values of a dependent variable; and
  returns the mean square error linear regression equation that fits ps. 
*/
getLinearRegPoints (ps) :=
  block ([N, eqn, mse, m, b],
    N: apply (matrix, ps),
    eqn: y = m * x + b,
    mse: lsquares_mse (N, [x, y], eqn),
    [[m, b]]: lsquares_estimates_approximate (mse, [m, b]),
    ev (eqn, m = rhs (m), b = rhs (b)))$ 

/*
  Accepts three arguments: M; xField the field accessor for the
  independent variable; and yField, the field accessor for the
  dependent variable; and returns the mean square error linear
  regression equation that fits M. 
*/
getLinearReg (M, xField, yField) :=
  getLinearRegPoints (
    map (
      lambda ([row], [
        getFieldValue (xField)(row),
        getFieldValue (yField)(row)]),
      M))$

/*
  Accepts four arguments: ps, a two dimensional array whose first column
  represents the values of an independent variable and whose second
  column represents the associated values of a dependent variable; and
  plots the values of the two variables along with the mean square error
  linear regressor.
*/
plotPointsWithLinearReg (ps, plotTitle, labelx, labely) :=
  block ([linearReg, M],
    linearReg: rhs (getLinearRegPoints (ps)),
    M: apply (matrix, ps),
    draw2d (
      point_size = 1,
      point_type = filled_circle,
      /* points_joined = true, */
      points (ps),
      color = green,
      /* explicit (linearReg, x, smin (M)[1], smax (M)[1]), */
      explicit (linearReg, x, 0, smax (M)[1]),
      grid = true,
      title = plotTitle,
      xlabel = labelx,
      ylabel = labely,
      /* yrange = [smin (M)[2], smax (M)[2]], */
      yrange = [0, smax (M)[2]],
      xrange = [0, smax (M)[1]],
      file_name = "tmp_plot",
      terminal = 'png))$

/*
  Accepts one argument: ps, a two dimensional array whose first column
  represents the values of an independent variable and whose second
  column represents the associated values of a dependent variable; and
  returns the square errors between the points in ps and the mean
  square error linear regressor.
*/
getLinearRegErrs (ps) :=
  block ([linearReg],
    linearReg: rhs (getLinearRegPoints (ps)),
    map (
      lambda ([row], (row [2] - ev (linearReg, x = row [1]))^2),
      ps))$
